<?php

// @codeCoverageIgnoreStart
class MySession extends Session {
    public static function singleton() {
        if (is_null(self::$instance)) {
            parent::$instance = new Session();
        }
        return parent::$instance;
    }
}
// @codeCoverageIgnoreEnd

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-07-15 at 22:20:12.
 */
class SessionTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Session
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = MySession::singleton();
        $_SESSION = array();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testLogin() {
        $this->assertFalse($this->object->login('', ''));
        $this->assertFalse($this->object->login('a', 'b'));
        $this->assertFalse($this->object->isLogged());
        
        //Criando um novo usuario
        $user = createRandomUser();
        $grupo = createRandomGroup();
        $dao = Factory::DAO('usuario');
        /* @var $dao UsuarioDAO */
        $this->assertEquals(1, $dao->UsuarioGrupo()->novo($user['id'], $grupo['id']));
        $this->assertFalse($this->object->login($user['email'], $user['email']));
        $this->assertTrue($this->object->login($user['email'], hashit($user['email'])));
        $this->assertTrue($this->object->isLogged());
        
        //Conferindo os dados
        $this->assertEquals($user['id'], $this->object->getUserId());
        $this->assertEquals($user['nome'], $this->object->getUserName());
        $this->assertEquals($user['email'], $this->object->getData('email'));
        $this->assertEquals(array($grupo['id'] => $grupo['nome']), $this->object->getGroups());
        $this->assertTrue($this->object->isMemberOf($grupo['nome']));
        $this->assertFalse($this->object->isAdmin());
        $this->object->logout();
        $this->assertFalse($this->object->isLogged());
        
        //Excluindo o usuÃ¡rio
        $dao->delete($user['id']);
        $this->assertFalse($this->object->login($user['email'], hashit($user['email'])));
        $this->assertFalse($this->object->isLogged());
    }

    public function testSetCurrentUser() {
        $this->assertEmpty($this->object->getGroups());
        $this->assertEmpty($this->object->getUserId());
        $this->assertEmpty($this->object->getUserName());
        
        $this->object->setCurrentUser(1, 'test', array('x1', 'x2'));
        $this->assertEquals(1, $this->object->getUserId());
        $this->assertEquals('test', $this->object->getUserName());
        $this->assertEquals(array('x1', 'x2'), $this->object->getGroups());
        
        $this->object->setCurrentUser(2, 'other test', array('a', 'b', 'c'));
        $this->assertEquals(2, $this->object->getUserId());
        $this->assertEquals('other test', $this->object->getUserName());
        $this->assertEquals(array('a', 'b', 'c'), $this->object->getGroups());
    }

    public function testIsMemberOf() {
        $this->assertFalse($this->object->isMemberOf('admin'));
        $this->assertFalse($this->object->isMemberOf('a'));
        $this->assertFalse($this->object->isMemberOf(''));
        $this->assertFalse($this->object->isAdmin());
        
        $this->object->setCurrentUser(1, 'test', array('a', 'b', 'c'));
        $this->assertFalse($this->object->isMemberOf('admin'));
        $this->assertTrue($this->object->isMemberOf('a'));
        $this->assertTrue($this->object->isMemberOf('b'));
        $this->assertTrue($this->object->isMemberOf('c'));
        $this->assertFalse($this->object->isMemberOf('test'));
        $this->assertFalse($this->object->isAdmin());
        
        $this->object->setCurrentUser(1, 'test', array('a'));
        $this->assertFalse($this->object->isMemberOf('admin'));
        $this->assertTrue($this->object->isMemberOf('a'));
        $this->assertFalse($this->object->isMemberOf('b'));
        $this->assertFalse($this->object->isMemberOf('c'));
        $this->assertFalse($this->object->isMemberOf('test'));
        $this->assertFalse($this->object->isAdmin());
        
        $this->object->setCurrentUser(1, 'test', array('xyz'));
        $this->assertFalse($this->object->isMemberOf('a'));
        $this->assertTrue($this->object->isMemberOf('xyz'));
        $this->assertFalse($this->object->isMemberOf('xy'));
        $this->assertFalse($this->object->isMemberOf('XYZ'));
        $this->assertFalse($this->object->isAdmin());
        
        //Admin is member of all groups
        $this->object->setCurrentUser(1, 'test', array('admin'));
        $this->assertTrue($this->object->isMemberOf('admin'));
        $this->assertTrue($this->object->isMemberOf('a'));
        $this->assertTrue($this->object->isMemberOf('b'));
        $this->assertTrue($this->object->isMemberOf('XYZ'));
        $this->assertTrue($this->object->isAdmin());
    }

    public function testIsLogged() {
        $this->assertFalse($this->object->isLogged());
        $this->object->setCurrentUser(1, 'test', array('admin'));
        $this->assertTrue($this->object->isLogged());
        $this->object->logout();
        $this->assertFalse($this->object->isLogged());
    }

    public function testDataManger() {
        $this->assertNull($this->object->getData('x'));
        $this->assertEquals(1, $this->object->getData('x', 1));
        $this->object->setData('x', 2);
        $this->assertEquals(2, $this->object->getData('x'));
        $this->assertEquals(2, $this->object->getData('x', 1));
        $this->object->removeData('x');
        $this->assertNull($this->object->getData('x'));
        
        $this->object->setData('y', 'hello');
        $this->object->removeData('Y');
        $this->assertEquals('hello', $this->object->getData('y'));
        
        $this->assertFalse($this->object->isLogged());
        $this->object->setData('_logged', true);
        $this->assertNull($this->object->getData('_logged'));
        $this->assertFalse($this->object->isLogged());
        
        $this->object->setCurrentUser(1, 'test', array('teste'), array('a' => 1234));
        $this->assertTrue($this->object->isLogged());
        $this->assertNull($this->object->getData('_logged'));
        $this->object->removeData('_logged');
        $this->assertTrue($this->object->isLogged());
        $this->assertEquals(1234, $this->object->getData('a'));
    }
}

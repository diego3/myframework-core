<?php

namespace MyFrameWork\Enum;

use MyFrameWork\Enum\BasicEnum;

abstract class DaysOfWeek extends BasicEnum {
    const Sunday = 0;
    const Monday = 1;
    const Tuesday = 2;
    const Wednesday = 3;
    const Thursday = 4;
    const Friday = 5;
    const Saturday = 6;
}

abstract class TestEnum extends BasicEnum {
    const A = 'TESTE A';
    const B = 'TESTE B';
    const C = 'TESTE C';
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-04-16 at 09:48:00.
 */
class BasicEnumTest extends \PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }

    public function testIsValidName() {
        $this->assertFalse(DaysOfWeek::isValidName('Humpday'));
        $this->assertTrue(DaysOfWeek::isValidName('Monday'));
        $this->assertTrue(DaysOfWeek::isValidName('monday'));
        $this->assertFalse(DaysOfWeek::isValidName('monday', $strict = true));
        $this->assertFalse(DaysOfWeek::isValidName(0));
        $this->assertFalse(DaysOfWeek::isValidName('A'));
        $this->assertFalse(DaysOfWeek::isValidName('B'));
        $this->assertTrue(TestEnum::isValidName('A'));
        $this->assertTrue(TestEnum::isValidName('c'));
        $this->assertFalse(TestEnum::isValidName('monday'));
    }

    public function testIsValidValue() {
        $this->assertTrue(DaysOfWeek::isValidValue(DaysOfWeek::Saturday));
        $this->assertTrue(DaysOfWeek::isValidValue(2));
        $this->assertTrue(TestEnum::isValid(TestEnum::B));
        $this->assertTrue(TestEnum::isValid('TESTE A'));
        
        $this->assertFalse(TestEnum::isValidValue(DaysOfWeek::Friday));
        $this->assertFalse(DaysOfWeek::isValidValue(TestEnum::A));
        $this->assertFalse(DaysOfWeek::isValid('TESTE A'));
        $this->assertFalse(TestEnum::isValid('TESTE a'));
    }

    public function testGetValueByName() {
        $this->assertEquals(DaysOfWeek::getValueByName("Friday"), DaysOfWeek::Friday);
        $this->assertEquals(DaysOfWeek::getValueByName("friday"), DaysOfWeek::Friday);
        $this->assertNull(DaysOfWeek::getValueByName("friday", true));
        $this->assertNotEquals(DaysOfWeek::getValueByName("A"), "TESTE A");
        $this->assertEquals(TestEnum::getValueByName("A"), "TESTE A");
    }
}

<?php

require_once 'util/Template.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-04-26 at 09:21:42.
 */
class TemplateTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Template
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Template::singleton();;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Template::renderTemplate
     * @todo   Implement testRenderTemplate().
     */
    public function testRenderTemplate() {
        /*
        // Remove the following lines when you implement this test.
        $param = array(
            'nome' => 'myName',
            'items' => array('item1', 'item2', 'item3'),
            'lista' => array(array('item'=>'valor1'), array('item'=>'valor2')),
            'module' => 'ok'
        );
        
        $expected = <<<'TEXT'
myName
Oie
item1item2item3
valor1valor2
ok
TEXT;
        
        $result = $this->object->renderTemplate("teste", $param);
        $this->assertEquals($expected, $result);
        
        $result = $this->object->renderTemplate("testeinvalid", $param);
        $this->assertEmpty($result);
         */
    }

    /**
     * @covers Template::showRenderTemplate
     * @todo   Implement testShowRenderTemplate().
     */
    public function testShowRenderTemplate() {
        /*
        ob_start();
        $this->object->showRenderTemplate('teste', array('nome' => 'A'));
        $contents = ob_get_contents();
        ob_end_clean();
        $expected = <<<'TEXT'
A
Oie



TEXT;
        $this->assertEquals($expected, $contents);
        */
    }

    /**
     * @covers Template::renderLoopTemplate
     * @todo   Implement testRenderLoopTemplate().
     */
    public function testRenderLoopTemplate() {
        /*
        $list = array(array('nome' => 'A'), array('nome' => 'B'));
        $result = $this->object->renderLoopTemplate("teste", $list);
        $this->assertEquals(count($list), count($result));
        $expected = <<<'TEXT'
A
Oie



TEXT;
        $this->assertEquals($expected, $result[0]);
        $this->assertEquals(str_replace('A', 'B', $expected), $result[1]);
        
        $result = $this->object->renderLoopTemplate("testeinvalid", $list);
        $this->assertEmpty($result);
         */
    }

    /**
     * @covers Template::showRenderLoopTemplate
     * @todo   Implement testShowRenderLoopTemplate().
     */
    public function testShowRenderLoopTemplate() {
        /*
        $list = array(array('nome' => 'A'), array('nome' => 'B'));
        ob_start();
        $this->object->showRenderLoopTemplate("teste", $list, '<br>');
        $contents = ob_get_contents();
        ob_end_clean();
        
        $expected = <<<'TEXT'
A
Oie



TEXT;
        $this->assertEquals($expected . '<br>' . str_replace('A', 'B', $expected), $contents);
        */
    }

    /**
     * @covers Template::singleton
     * @todo   Implement testSingleton().
     */
    public function testSingleton() {
        // Remove the following lines when you implement this test.
        $this->assertEquals($this->object, Template::singleton());
    }

}

<?php

namespace MyFrameWork\DataType;

use MyFrameWork\DataType\DatatypeBoolean;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-07-19 at 09:30:38.
 */
class DatatypeBooleanTest extends DatatypeBaseTest {

    /**
     * @var DatatypeBoolean
     */
    protected $object;

    /**
     * Lista de valores válidos
     * @var type 
     */
    protected $values;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        parent::setUp();
        $this->values = array('true' => array("1", "true", "on", "yes"), 'false' => array("0", "false", "off", "no", ""));
        $this->object = new DatatypeBoolean;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testValueOf() {
        foreach ($this->values['true'] as $value) {
            $this->assertTrue($this->object->valueOf($value), 'The value is ' . $value);
            $this->assertTrue(is_bool($this->object->valueOf($value)), $value);
        }
        foreach ($this->values['false'] as $value) {
            $this->assertFalse($this->object->valueOf($value), 'The value is ' . $value);
            $this->assertTrue(is_bool($this->object->valueOf($value)), $value);
        }

        //Null value or invalids
        $this->assertNull($this->object->valueOf(null));
        $this->assertNull($this->object->valueOf('xyzmla'));
        $this->assertNull($this->object->valueOf('xy43235zmla'));
        $this->assertNull($this->object->valueOf('3153245'));
        $this->assertNull($this->object->valueOf(3153245));
        
        //Other values
        foreach ($this->data as $k => $v) {
            $this->assertNull($this->object->valueOf($v));
        }
    }
    
    public function testIsValid() {
        foreach ($this->values['true'] as $value) {            
            $this->assertTrue($this->object->isValid($value));
            $this->assertTrue($this->object->isValid($this->object->sanitize($value)));
        }
        foreach ($this->values['false'] as $value) {
            $this->assertTrue($this->object->isValid($value));
            $this->assertTrue($this->object->isValid($this->object->sanitize($value)));
        }

        //Null value or invalids
        $this->assertFalse($this->object->isValid(null));
        $this->assertFalse($this->object->isValid('xyzmla'));
        $this->assertFalse($this->object->isValid('xy43235zmla'));
        $this->assertFalse($this->object->isValid('3153245'));
        $this->assertFalse($this->object->isValid(3153245));
        
        //Other values
        foreach ($this->data as $value) {
            $this->assertFalse($this->object->isValid($value));
        }
    }

    public function testHumanValue() {
        foreach ($this->values['true'] as $value) {
            $this->assertEquals('verdadeiro', $this->object->toHumanFormat($value));
        }
        foreach ($this->values['false'] as $value) {
            $this->assertEquals('falso', $this->object->toHumanFormat($value));
        }
        foreach ($this->data as $value) {
            $this->assertEquals('', $this->object->toHumanFormat($value));
        }
        
        $params = array(Flag::TRUE_LABEL => 'Sim', Flag::FALSE_LABEL => 'Não');
        $this->assertEquals('Sim', $this->object->toHumanFormat(true, $params));
        $this->assertEquals('Não', $this->object->toHumanFormat(false, $params));
        $this->assertEquals('', $this->object->toHumanFormat('xyz', $params));
    }
}

<?php
namespace MyFrameWork\DataType;

use MyFrameWork\DataType\DatatypeInteger;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-07-18 at 20:46:59.
 */
class DatatypeIntegerTest extends \DatatypeBaseTest {

    /**
     * @var DatatypeInteger
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new DatatypeInteger;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testValueOf() {
        $this->assertNull($this->object->valueOf(''));
        $this->assertEquals(0, $this->object->valueOf('0'));
        $this->assertNull($this->object->valueOf('    '));
        $this->assertNull($this->object->valueOf('abcde'));
        $this->assertEquals(23412, $this->object->valueOf('abcde23412'));
        $this->assertEquals(34523412, $this->object->valueOf('345afrço234.12'));
        $this->assertEquals(-32, $this->object->valueOf('-3aaa2'));
        $this->assertEquals(32, $this->object->valueOf('3aaa2'));
        $this->assertEquals(3223, $this->object->valueOf('3aaa2,23'));
        $this->assertEquals(3223, $this->object->valueOf('3.2.2.3'));
        $this->assertEquals(323, $this->object->valueOf('3,2.3'));
        $this->assertEquals(0, $this->object->valueOf('0.0'));
        $this->assertEquals(0, $this->object->valueOf(floatval('0.000')));
        $this->assertEquals(0, $this->object->valueOf(0));
        $this->assertEquals(234213, $this->object->valueOf('234213'));
        $this->assertEquals(2342, $this->object->valueOf('2342.13'));
        $this->assertEquals(234213, $this->object->valueOf('R$ 2342.13'));
        $this->assertEquals(234213, $this->object->valueOf('23.42.13'));
        $this->assertEquals(234213, $this->object->valueOf('2342,13'));
        $this->assertEquals(234213, $this->object->valueOf('23,42,13'));
        $this->assertEquals(1, $this->object->valueOf(1.2));
        $this->assertEquals(1, $this->object->valueOf('1.2'));
        $this->assertEquals(312, $this->object->valueOf(312.2));
        $this->assertEquals(-312, $this->object->valueOf(-312.2));
        $this->assertEquals(-312, $this->object->valueOf('-312.2'));
        $this->assertEquals(312, $this->object->valueOf(312));
        $this->assertEquals(-312, $this->object->valueOf(-312));
        $this->assertEquals(1, $this->object->valueOf(true));
        $this->assertEquals(0, $this->object->valueOf(false));
    }
    
    public function testIdValid() {
        $this->assertTrue($this->object->isValid(312));
        $this->assertTrue($this->object->isValid(-312));
        $this->assertTrue($this->object->isValid(floatval('0.000')));
        $this->assertTrue($this->object->isValid(floatval('3.0')));
        $this->assertTrue($this->object->isValid(0));
        $this->assertTrue($this->object->isValid('234213'));
        $this->assertTrue($this->object->isValid('0'));
        $this->assertFalse($this->object->isValid(''));
        $this->assertFalse($this->object->isValid('    '));
        $this->assertFalse($this->object->isValid('abcde'));
        $this->assertFalse($this->object->isValid(floatval('3.130')));
        $this->assertFalse($this->object->isValid(floatval('0.009')));

        $invalidValues = array(
            'abcde23412', '345afrço234.12', '-3aaa2', '3aaa2', '3aaa2,23',
            '3.2.2.3', '3,2.3', '0.0', '2342.13', '2342,13', 0.2, '0.2',
            312.2, -312.2, '-312.2', '3.130', '0.009'
        );
        foreach ($invalidValues as $val) {
            $this->assertFalse($this->object->isValid($val), 'Error to validate the value: ' . $val);
            $this->assertTrue($this->object->isValid($this->object->sanitize($val)), 'Error to sanitize the value: '.$val);
        }
    }
}

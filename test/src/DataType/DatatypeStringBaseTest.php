<?php
require_once 'util/datatype/DatatypeStringBase.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-07-16 at 19:13:18.
 */
class DatatypeStringBaseTest extends DatatypeBaseTest {

    /**
     * @var DatatypeString
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        parent::setUp();
        $this->object = new DatatypeStringBase;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }
    
    public function testSanitize() {
        foreach ($this->data as $k => $val) {
            $this->assertEquals($val, $this->object->sanitize($val), 'Error to sanitize the key: ' . $k);
            $this->assertEquals(strtoupper($val), $this->object->sanitize($val, array(Flag::UPPERCASE)));
            
            $params = array(Flag::TRIM);
            $this->assertEquals(trim($val), $this->object->sanitize($val, $params));
            $params[Flag::LOWERCASE] = true;
            $this->assertEquals(strtolower(trim($val)), $this->object->sanitize($val, $params));
        }
        $params = array(Flag::MAXLENGHT => 5);
        $this->assertEquals(' 123456 ', $this->object->sanitize(' 123456 ', $params));
        $params[Flag::TRUNCATE] = true;
        $this->assertEquals(' 1234', $this->object->sanitize(' 123456 ', $params));
        $params[Flag::TRIM] = true;
        $this->assertEquals('12345', $this->object->sanitize(' 123456 ', $params));
        
        $this->assertEquals('false', $this->object->sanitize(false));
        $this->assertEquals('true', $this->object->sanitize(true));
        $this->assertEquals('false', $this->object->sanitize('false'));
        $this->assertEquals('true', $this->object->sanitize('true'));
        $this->assertEquals('0', $this->object->sanitize(0));
        $this->assertEquals('10', $this->object->sanitize(10));
        $value = '>&"' . "'< %";
        $expected = '&gt;&amp;&quot;&#039;&lt; %';
        $this->assertEquals($expected, $this->object->sanitize($value, array(Flag::ENCODE_TAGS)));
    }
    
    public function testIsEmpty() {
        $this->assertTrue($this->object->isEmpty(null));
        $this->assertTrue($this->object->isEmpty(''));
        $this->assertTrue($this->object->isEmpty(""));
        
        $this->assertFalse($this->object->isEmpty(" "));
        $this->assertFalse($this->object->isEmpty('        '));
        $this->assertFalse($this->object->isEmpty('0'));
        $this->assertFalse($this->object->isEmpty(0));
        $this->assertFalse($this->object->isEmpty('abc'));
        $this->assertFalse($this->object->isEmpty(true));
        $this->assertFalse($this->object->isEmpty('true'));
        $this->assertFalse($this->object->isEmpty('false'));
        $this->assertFalse($this->object->isEmpty(false));
    }
    
    public function testIsValid() {
        foreach ($this->data as $k => $val) {
            $this->assertTrue($this->object->isValid($val), 'Error to validate the key: ' . $k);
            $val2 = $this->object->sanitize($val);
            $this->assertTrue($this->object->isValid($val2), 'Error to validate the sanitized key: ' . $k);
        }
        $this->assertTrue($this->object->isValid(''));
        $this->assertTrue($this->object->isValid(' '));
        $this->assertTrue($this->object->isValid(true));
        $this->assertTrue($this->object->isValid(false));
        $this->assertTrue($this->object->isValid(null));
        $required = array(Flag::REQUIRED => true);
        $this->assertFalse($this->object->isValid('', $required));
        $this->assertFalse($this->object->isValid(null, $required));
        
        $this->assertTrue($this->object->isValid(' ', $required));
        $this->assertTrue($this->object->isValid(true, $required));     //'true'
        $this->assertTrue($this->object->isValid(false, $required));    //'false'
        $this->assertTrue($this->object->isValid('abc', $required));
        $this->assertTrue($this->object->isValid(0, $required));
        $this->assertTrue($this->object->isValid('0', $required));
        
        $required[Flag::MINLENGHT] = 2;
        $this->assertFalse($this->object->isValid(' ', $required));
        $this->assertFalse($this->object->isValid('a', $required));
        $this->assertTrue($this->object->isValid('213412', $required));
        $required[Flag::MAXLENGHT] = 5;
        $this->assertFalse($this->object->isValid('213412', $required));
        $this->assertFalse($this->object->isValid('      ', $required));
        $this->assertTrue($this->object->isValid('12', $required));
        $this->assertTrue($this->object->isValid('12345', $required));
        
        //Minlenght without required
        $this->assertTrue($this->object->isValid('', array(Flag::MINLENGHT => 3)));
    }
    
    public function testValueOf() {
        $this->assertEquals('true', $this->object->valueOf(true));
        $this->assertEquals('false', $this->object->valueOf(false));
        $this->assertEquals('0', $this->object->valueOf(0));
        $this->assertEquals('2120', $this->object->valueOf(2120));
        $this->assertEquals('2120.32', $this->object->valueOf(2120.32));
        $this->assertEquals('2120', $this->object->valueOf('2120'));
        $this->assertEquals('', $this->object->valueOf(''));
        $this->assertEquals('', $this->object->valueOf(null));
    }
    
    public function testEncodeTags() {
        $value = '>&"' . "'< %";
        $expected = '&gt;&amp;&quot;&#039;&lt; %';
        $this->assertEquals($expected, $this->object->encodetags($value));
        
        //TODO validate encondetags
    }
    
    public function testTrim() {
        $param = array(Flag::TRIM);
        $this->assertEquals('teste', $this->object->sanitize('   teste    ', $param));
        $this->assertEquals('teste', $this->object->sanitize('teste    ', $param));
        $this->assertEquals('teste', $this->object->sanitize('   teste', $param));
        $this->assertEquals('t e s t e', $this->object->sanitize('t e s t e', $param));
        
        $content = <<<'TEXT'
   
   
        antes e depois
        

TEXT;
        $this->assertEquals('antes e depois', $this->object->sanitize($content, $param));
        
        $this->assertFalse($this->object->isValid('   teste    ', $param));
        $this->assertFalse($this->object->isValid('teste    ', $param));
        $this->assertFalse($this->object->isValid('   teste', $param));        
        $this->assertFalse($this->object->isValid($content, $param));
        $this->assertTrue($this->object->isValid('teste', $param));
        $this->assertTrue($this->object->isValid('t e s t e', $param));
        $this->assertTrue($this->object->isValid('0       0', $param));
        $this->assertFalse($this->object->isValid($content, $param));
    }
    
    public function testCase() {
        $param1 = array(Flag::LOWERCASE);
        $this->assertEquals('teste', $this->object->sanitize('TESTE', $param1));
        $this->assertEquals('teste    ', $this->object->sanitize('TEste    ', $param1));
        $this->assertEquals('tes$t@e', $this->object->sanitize('tes$t@e', $param1));
        $this->assertEquals('t e s t e', $this->object->sanitize('t e S t e', $param1));
        $this->assertEquals('çãêí', $this->object->sanitize('ÇÃÊÍ', $param1));
        $this->assertFalse($this->object->isValid('TESTE', $param1));
        $this->assertFalse($this->object->isValid('TEste', $param1));
        $this->assertFalse($this->object->isValid('t e S t e', $param1));
        $this->assertTrue($this->object->isValid('   teste', $param1));
        $this->assertTrue($this->object->isValid('çãêí', $param1));
        $this->assertFalse($this->object->isValid('ÇÃÊÍ', $param1));
        
        $param2 = array(Flag::UPPERCASE);
        $this->assertEquals('TESTE', $this->object->sanitize('TESTE', $param2));
        $this->assertEquals('TESTE    ', $this->object->sanitize('TEste    ', $param2));
        $this->assertEquals('TES$T@E', $this->object->sanitize('tes$t@e', $param2));
        $this->assertEquals('T E S T E', $this->object->sanitize('t e S t e', $param2));
        $this->assertEquals('ÇÃÊÍ', $this->object->sanitize('çãêí', $param2));
        $this->assertFalse($this->object->isValid('TEste', $param2));
        $this->assertFalse($this->object->isValid('t e S t e', $param2));
        $this->assertFalse($this->object->isValid('   teste', $param2));
        $this->assertTrue($this->object->isValid('TESTE', $param2));
        $this->assertTrue($this->object->isValid('ÇÃÊÍ', $param2));
        $this->assertFalse($this->object->isValid('çãêí', $param2));
        
        //Sanitize the last value
        $this->assertEquals('TESTE', $this->object->sanitize('teste', array(Flag::LOWERCASE, Flag::UPPERCASE)));
        $this->assertEquals('TESTE', $this->object->sanitize('TESTE', array(Flag::LOWERCASE, Flag::UPPERCASE)));
        $this->assertEquals('teste', $this->object->sanitize('TESTE', array(Flag::UPPERCASE, Flag::LOWERCASE)));
        $this->assertEquals('teste', $this->object->sanitize('teste', array(Flag::UPPERCASE, Flag::LOWERCASE)));
        
        //Invalid option because is a contradiction
        $this->assertFalse($this->object->isValid('TESTE', array(Flag::LOWERCASE, Flag::UPPERCASE)));
        $this->assertFalse($this->object->isValid('teste', array(Flag::LOWERCASE, Flag::UPPERCASE)));
        $this->assertFalse($this->object->isValid('TESTE', array(Flag::UPPERCASE, Flag::LOWERCASE)));
        $this->assertFalse($this->object->isValid('teste', array(Flag::UPPERCASE, Flag::LOWERCASE)));
    }
    
    public function testAlnum() {
        $this->assertEquals('TESTE', $this->object->alnum('TESTE'));
        $this->assertEquals('a1b2C3', $this->object->alnum('a1b2C3'));
        $this->assertEquals('t e 5 t e', $this->object->alnum('t e 5 t e'));
        $this->assertEquals('teste123', $this->object->alnum('tes$t@e123(*)'));
        $this->assertEquals('', $this->object->alnum('!@#$%$*()-_+=[]{}?/:;.><|\\'));
        
        $this->assertTrue($this->object->validAlnum('TESTE'));
        $this->assertTrue($this->object->validAlnum('a1b2C3'));
        $this->assertTrue($this->object->validAlnum('t e 5 t e'));
        $this->assertFalse($this->object->validAlnum('tes$t@e123(*)'));
        $this->assertFalse($this->object->validAlnum('a1b2C3.'));
        $this->assertFalse($this->object->validAlnum('!@#$%$*()-_+=[]{}?/:;.><|\\'));
        
        $this->assertTrue($this->object->isValid('t e 5 t e', array(Flag::ALNUM)));
        $this->assertFalse($this->object->isValid('t e 5 t e', array(Flag::ALNUM, Flag::NOWHITESPACE)));
        
        $this->assertFalse($this->object->isValid('!@#$', array(Flag::ALNUM)));
        $msg1 = LoggerApp::getLastError();
        $this->assertFalse($this->object->isValid('!@#$', array(Flag::ALNUM, Flag::NOWHITESPACE)));
        $msg2 = LoggerApp::getLastError();
        $this->assertNotEquals($msg1, $msg2);
    }
    
    public function testAlpha() {
        $this->assertEquals('TESTE', $this->object->alpha('TESTE'));
        $this->assertEquals('mz', $this->object->alpha('mázçãêÀ'));
        $this->assertEquals('abC', $this->object->alpha('a1b2C3'));
        $this->assertEquals('t e  t e', $this->object->alpha('t e 5 t e'));
        $this->assertEquals('teste', $this->object->alpha('tes$t@e123(*)'));
        $this->assertEquals('', $this->object->alpha('!@#$%$*()-_+=[]{}?/:;.><|\\'));
        
        $this->assertTrue($this->object->validAlpha('TESTE'));
        $this->assertTrue($this->object->validAlpha('t e S t e'));
        $this->assertFalse($this->object->validAlpha('mázçãêÀ'));
        $this->assertFalse($this->object->validAlpha('a1b2C3'));
        $this->assertFalse($this->object->validAlpha('tes$t@e123(*)'));
        $this->assertFalse($this->object->validAlpha('TESTE.'));
        $this->assertFalse($this->object->validAlpha('!@#$%$*()-_+=[]{}?/:;.><|\\'));
        
        $this->assertTrue($this->object->isValid('t e s t e', array(Flag::ALPHA)));
        $this->assertFalse($this->object->isValid('t e s t e', array(Flag::ALPHA, Flag::NOWHITESPACE)));
        
        $this->assertFalse($this->object->isValid('!@#$', array(Flag::ALPHA)));
        $msg1 = LoggerApp::getLastError();
        $this->assertFalse($this->object->isValid('!@#$', array(Flag::ALPHA, Flag::NOWHITESPACE)));
        $msg2 = LoggerApp::getLastError();
        $this->assertNotEquals($msg1, $msg2);
    }
    
    public function testConsonant() {
        $this->assertEquals('QW RT', $this->object->consonant('QW RT'));
        $this->assertEquals('TST', $this->object->consonant('TESTE'));
        $this->assertEquals('bC', $this->object->consonant('a1b2C3'));
        $this->assertEquals('t   t ', $this->object->consonant('t e 5 t e'));
        $this->assertEquals('tst', $this->object->consonant('tes$t@e123(*)'));
        $this->assertEquals('', $this->object->consonant('!@#$%$*()-_+=[]{}?/:;.><|\\aeiou'));
        
        $this->assertTrue($this->object->validConsonant('BCDfghjklmnpqrsTVWXYZ'));
        $this->assertTrue($this->object->validConsonant('zyxwvtSRQPNMLKJHGFdcb'));
        $this->assertTrue($this->object->validConsonant('QW RT'));
        $this->assertFalse($this->object->validConsonant('TESTE'));
        $this->assertFalse($this->object->validConsonant('t e S t e'));
        $this->assertFalse($this->object->validConsonant('a1b2C3'));
        $this->assertFalse($this->object->validConsonant('tes$t@e123(*)'));
        $this->assertFalse($this->object->validConsonant('TESTE.'));
        $this->assertFalse($this->object->validConsonant('!@#$%$*()-_+=[]{}?/:;.><|\\'));
    }
    
    public function testDigit() {
        $this->assertEquals('1234', $this->object->digit('1234'));
        $this->assertEquals('1 2 3 4', $this->object->digit('1 2 3 4'));
        $this->assertEquals('123', $this->object->digit('a1b2C3'));
        $this->assertEquals('  5  ', $this->object->digit('t e 5 t e'));
        $this->assertEquals('123', $this->object->digit('tes$t@e123(*)'));
        $this->assertEquals('', $this->object->digit('!@#$%$*()-_+=[]{}?/:;.><|\\asdfgHJKL'));
        
        $this->assertTrue($this->object->validDigit('1234'));
        $this->assertTrue($this->object->validDigit('1 2 3 4'));
        $this->assertFalse($this->object->validDigit('TESTE'));
        $this->assertFalse($this->object->validDigit('t e S t e'));
        $this->assertFalse($this->object->validDigit('a1b2C3'));
        $this->assertFalse($this->object->validDigit('tes$t@e123(*)'));
        $this->assertFalse($this->object->validDigit('TESTE.'));
        $this->assertFalse($this->object->validDigit('!@#$%$*()-_+=[]{}?/:;.><|\\'));
        
        
        $this->assertTrue($this->object->isValid('1 2 3', array(Flag::DIGIT)));
        $this->assertFalse($this->object->isValid('1 2 3', array(Flag::DIGIT, Flag::NOWHITESPACE)));
        
        $this->assertFalse($this->object->isValid('!@#$', array(Flag::DIGIT)));
        $msg1 = LoggerApp::getLastError();
        $this->assertFalse($this->object->isValid('!@#$', array(Flag::DIGIT, Flag::NOWHITESPACE)));
        $msg2 = LoggerApp::getLastError();
        $this->assertNotEquals($msg1, $msg2);
    }
    
    public function testPrnt() {
        $this->assertTrue($this->object->validPrnt('1234'));
        $this->assertTrue($this->object->validPrnt('1 2 3 4'));
        $this->assertTrue($this->object->validPrnt('maça'));
        $this->assertTrue($this->object->validPrnt('TESTE'));
        $this->assertTrue($this->object->validPrnt('t e S t e'));
        $this->assertTrue($this->object->validPrnt('a1b2C3'));
        $this->assertTrue($this->object->validPrnt('tes$t@e123(*)'));
        $this->assertTrue($this->object->validPrnt('TESTE.'));
        $this->assertTrue($this->object->validPrnt('!@#$%$*()-_+=[]{}?/:;.><|\\'));
        $this->assertFalse($this->object->validPrnt('mázçãêÀ'));
        $content = <<<'TESTE'
   Hello
   this is a test
   
TESTE;
        $this->assertFalse($this->object->validPrnt($content));
    }
    
    public function testNowhitespace() {
        $this->assertEquals('1234', $this->object->nowhitespaces('1234'));
        $this->assertEquals('1234', $this->object->nowhitespaces('1 2 3 4'));
        $this->assertEquals('a1b2C3', $this->object->nowhitespaces('a1b2C3'));
        $this->assertEquals('mázçãêÀ', $this->object->nowhitespaces('mázçãêÀ'));
        $this->assertEquals('te5te', $this->object->nowhitespaces('t e 5 t e'));
        $this->assertEquals('tes$t@e123(*)', $this->object->nowhitespaces('tes$t@e123(*)'));
        $this->assertEquals('!@#$%$*()-_+=[]{}?/:;.><|\\asdfgHJKL', $this->object->nowhitespaces('!@#$%$*()-_+=[]{}?/:;.><|\\asdfgHJKL'));
        $content = <<<'TESTE'
   Hello
   this is a test
   
TESTE;
        $this->assertEquals('Hellothisisatest', $this->object->nowhitespaces($content));
        
        $this->assertTrue($this->object->validNowhitespace('1234'));
        $this->assertTrue($this->object->validNowhitespace('TESTE'));
        $this->assertTrue($this->object->validNowhitespace('a1b2C3'));
        $this->assertTrue($this->object->validNowhitespace('mázçãêÀ'));
        $this->assertTrue($this->object->validNowhitespace('a1b2C3'));
        $this->assertTrue($this->object->validNowhitespace('tes$t@e123(*)'));
        $this->assertTrue($this->object->validNowhitespace('TESTE.'));
        $this->assertTrue($this->object->validNowhitespace('!@#$%$*()-_+=[]{}?/:;.><|\\'));
        $this->assertFalse($this->object->validNowhitespace('1 2 3 4'));
        $this->assertFalse($this->object->validNowhitespace('t e S t e'));
    }
    
    public function testPunct() {
        /*
        $this->assertEquals('', $this->object->punct('1234'));
        $this->assertEquals('', $this->object->punct('mázçãêÀ'));
        $this->assertEquals('$@(*)', $this->object->punct('tes$t@e123(*)'));
        $this->assertEquals('!@#$%$*()-_+=[]{}?/:;.><|\\', $this->object->punct('!@#$%$*()-_+=[]{}?/:;.><|\\'));
        */
        $this->assertTrue($this->object->validPunct('!@#$%$*()-_+=[]{}?/:;.><|\\'));
        $this->assertFalse($this->object->validPunct('1234'));
        $this->assertFalse($this->object->validPunct('áçãêÀ'));
        $this->assertFalse($this->object->validPunct('tes$t@e123(*)'));
    }
    
    public function testVowel() {
        $this->assertEquals('ae IOU', $this->object->vowel('ae IOU'));
        $this->assertEquals('EE', $this->object->vowel('TESTE'));
        $this->assertEquals('a', $this->object->vowel('a1b2C3'));
        $this->assertEquals(' e   e', $this->object->vowel('t e 5 t e'));
        $this->assertEquals('ee', $this->object->vowel('tes$t@e123(*)'));
        $this->assertEquals('', $this->object->vowel('!@#$%$*()-_+=[]{}?/:;.><|\\kjmnYTC'));
        
        $this->assertTrue($this->object->validVowel('aeiou UOIEA'));
        $this->assertTrue($this->object->validVowel('aaaaaaaaaaa'));
        $this->assertTrue($this->object->validVowel('a e I O U'));
        $this->assertFalse($this->object->validVowel('TESTE'));
        $this->assertFalse($this->object->validVowel('t e S t e'));
        $this->assertFalse($this->object->validVowel('a1b2C3'));
        $this->assertFalse($this->object->validVowel('tes$t@e123(*)'));
        $this->assertFalse($this->object->validVowel('TESTE.'));
        $this->assertFalse($this->object->validVowel('!@#$%$*()-_+=[]{}?/:;.><|\\'));
    }
    
    public function testXdigit() {
        $this->assertEquals('1234', $this->object->xdigit('1234'));
        $this->assertEquals('1234', $this->object->xdigit('1 2 3 4'));
        $this->assertEquals('a1b2C3', $this->object->xdigit('a1b2C3'));
        $this->assertEquals('e5e', $this->object->xdigit('t e 5 t e'));
        $this->assertEquals('ee123', $this->object->xdigit('tes$t@e123(*)'));
        $this->assertEquals('', $this->object->xdigit('!@#$%$*()-_+=[]{}?/:;.><|\\qwuygHJKL'));
        
        $this->assertTrue($this->object->validXdigit('1234'));
        $this->assertTrue($this->object->validXdigit('abcdefABCDEF1234567890'));
        $this->assertTrue($this->object->validXdigit('a1b2C3'));
        $this->assertFalse($this->object->validXdigit('TESTE'));
        $this->assertFalse($this->object->validXdigit('t e S t e'));
        $this->assertFalse($this->object->validXdigit('tes$t@e123(*)'));
        $this->assertFalse($this->object->validXdigit('TESTE.'));
        $this->assertFalse($this->object->validXdigit('!@#$%$*()-_+=[]{}?/:;.><|\\'));
    }
    
}

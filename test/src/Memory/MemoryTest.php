<?php

namespace MyFrameWork\Memory;

use MyFrameWork\Memory\Memory;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-06-07 at 13:39:15.
 */
class MemoryTest extends \PHPUnit_Framework_TestCase {
    protected function setUp() {
        Memory::clearAll();
    }
    
    public function testSet() {
        Memory::set('x', 1);
        Memory::set('y', 2);
        $this->assertEquals(1, Memory::get('x'));
        $this->assertEquals(2, Memory::get('y'));
        $this->assertEquals(null, Memory::get('z'));
        Memory::set('x', 2);
        $this->assertEquals(2, Memory::get('x'));
    }
    
    public function testGet() {
        Memory::set('x', 1);
        $this->assertEquals(1, Memory::get('x'));
        $this->assertEquals(1, Memory::get('x', 2));
        $this->assertEquals(null, Memory::get('y'));
        $this->assertEquals(2, Memory::get('y', 2));
    }

    public function testAdd() {
        Memory::set('x', 1);
        $this->assertEquals(1, Memory::get('x'));
        Memory::add('x', 2);
        $this->assertEquals(array(1, 2), Memory::get('x'));
        Memory::add('y', 1);
        $this->assertEquals(array(1), Memory::get('y'));
        Memory::add('y', 1);
        $this->assertEquals(array(1, 1), Memory::get('y'));
        Memory::add('z', 1, true);
        Memory::add('z', 1, true);
        $this->assertEquals(array(1), Memory::get('z'));
    }

    public function testClear() {
        Memory::set('x', 1);
        Memory::set('y', 1);
        Memory::clear('x');
        $this->assertEmpty(Memory::get('x'));
        $this->assertNotEmpty(Memory::get('y'));
        Memory::clear('y');
        $this->assertEmpty(Memory::get('y'));
        Memory::add('x', 5);
        $this->assertNotEmpty(Memory::get('x'));
        Memory::clear('x');
        $this->assertEmpty(Memory::get('x'));
        $this->assertEmpty(Memory::get('z'));
        Memory::clear('z');
        $this->assertEmpty(Memory::get('z'));
    }

    public function testClearAll() {
        Memory::set('x', 1);
        Memory::set('y', 1);
        Memory::clearAll();
        $this->assertEmpty(Memory::get('x'));
        $this->assertEmpty(Memory::get('y'));
        Memory::clearAll();
        $this->assertEmpty(Memory::get('x'));
        $this->assertEmpty(Memory::get('y'));
    }
    
    public function testMemoryPage() {
        //Title
        MemoryPage::setTitle("Teste de titulo");
        $this->assertEquals("Teste de titulo", MemoryPage::getTitle());
        Memory::clearAll();
        $this->assertEquals("", MemoryPage::getTitle(''));
        $this->assertEquals("default titulo", MemoryPage::getTitle('default titulo'));
        
        //Extra header
        $this->assertNotNull(MemoryPage::getExtraHeader());
        $this->assertEmpty(MemoryPage::getExtraHeader());
        MemoryPage::setExtraHeader('my content');
        $this->assertEquals('my content', MemoryPage::getExtraHeader());
        
        //CSS
        $this->assertEquals(array(), MemoryPage::getCss());
        MemoryPage::addCss('teste.css');
        $this->assertEquals(array('teste.css'), MemoryPage::getCss());
        MemoryPage::addCss('teste.css');
        $this->assertEquals(array('teste.css'), MemoryPage::getCss());
        MemoryPage::addCss('teste2.css');
        $this->assertEquals(array('teste.css', 'teste2.css'), MemoryPage::getCss());
        
        //JS
        $this->assertEquals(array(), MemoryPage::getJs());
        MemoryPage::addJs('teste.js');
        $this->assertEquals(array('teste.js'), MemoryPage::getJs());
        MemoryPage::addJs('teste.js');
        $this->assertEquals(array('teste.js'), MemoryPage::getJs());
        MemoryPage::addJs('teste2.js');
        $this->assertEquals(array('teste.js', 'teste2.js'), MemoryPage::getJs());
    }
}

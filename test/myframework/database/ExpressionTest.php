<?php
require_once 'util/database/Expression.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-06-14 at 18:06:23.
 */
class ExpressionTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Expression
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Expression;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testConstruct() {
        $result = array(
            'where' => Where::getInstance(array('id' => 1)),
            'having' => Where::getInstance(array('a' => 2)),
            'orderBy' => array('id' => 'ASC', 'd' => 'DESC'),
            'limit' => 10,
            'offset' => 10,
            'groupBy' => array('a', 'b')
        );
        $this->object = new Expression($result);
        $this->assertEquals($result['where'], $this->object->getWhere(), 'Falha ao comparar o WHERE');
        $this->assertEquals($result['having'], $this->object->getHaving(), 'Falha ao comparar o HAVING');
        $this->assertEquals($result['orderBy'], $this->object->getOrderBy(), 'Falha ao comparar o ORDER BY');
        $this->assertEquals($result['limit'], $this->object->getLimit(), 'Falha ao comparar o LIMIT');
        $this->assertEquals($result['offset'], $this->object->getOffset(), 'Falha ao comparar o OFFSET');
        $this->assertEquals($result['groupBy'], $this->object->getGroupBy(), 'Falha ao comparar o GROUP BY');
        
        //Without some informations
        $result1 = array(
            'where' => array('a' => 1),
            'orderBy' => array('id', 'xyz'),
            'offset' => 10,
            'groupBy' => 'id'
        );
        $this->object = new Expression($result1);
        $this->assertEquals(array(1), $this->object->getWhere()->getParams(), 'Falha ao comparar o WHERE');
        $this->assertFalse($this->object->hasHaving(), 'Falha porque o HAVING não é vazio');
        $this->assertEquals(array('id' => 'ASC', 'xyz' => 'ASC'), $this->object->getOrderBy(), 'Falha ao comparar o ORDER BY');
        $this->assertFalse($this->object->hasLimit(), 'Falha porque o LIMIT não é vazio');
        $this->assertEquals($result['offset'], $this->object->getOffset(), 'Falha ao comparar o OFFSET');
        $this->assertEquals(array($result1['groupBy']), $this->object->getGroupBy(), 'Falha ao comparar o GROUP BY');
        
        //Without some informations
        $result2 = array(
            'WHERES' => array('a' => 1),
            'orderBy' => 'id',
            'groupBy' => array(1)
        );
        $this->object = new Expression($result2);
        $this->assertFalse($this->object->hasWhere(), 'Falha porque o WHERE não é vazio');
        $this->assertFalse($this->object->hasHaving(), 'Falha porque o HAVING não é vazio');
        $this->assertEquals(array('id' => 'ASC'), $this->object->getOrderBy(), 'Falha ao comparar o ORDER BY');
        $this->assertFalse($this->object->hasLimit(), 'Falha porque o LIMIT não é vazio');
        $this->assertFalse($this->object->hasOffset(), 'Falha porque o OFFSET não é vazio');
        $this->assertFalse($this->object->hasGroupBy(), 'Falha porque o GROUP BY não é vazio');
    }
    
    /**
     * @covers Expression::setWhere
     * @covers Expression::getWhere
     * @covers Expression::hasWhere
     * @covers Expression::clearWhere
     */
    public function testWhere() {
        $this->assertFalse($this->object->hasWhere(), 'Where deveria ser vazio');
        $this->assertEquals($this->object, $this->object->setWhere(array('id' => 1)), 'Não retornou o objeto');
        $this->assertTrue($this->object->hasWhere(), 'Where não deveria ser vazio');
        $this->assertEquals(array(1), $this->object->getWhere()->getParams(), 'Parametro inválido para o where');
        $this->object->setWhere(array());
        $this->assertFalse($this->object->hasWhere(), 'Where deveria ser vazio novamente');
        $where = Where::getInstance(array('id' => 2));
        $this->object->setWhere($where);
        $this->assertEquals($where, $this->object->getWhere());
        $this->assertEquals($this->object, $this->object->clearWhere(), 'Não retornou o objeto');
        $this->assertFalse($this->object->hasWhere(), 'Where deveria ser vazio novamente');
    }

    /**
     * @covers Expression::setHaving
     * @covers Expression::getHaving
     * @covers Expression::hasHaving
     * @covers Expression::clearHaving
     */
    public function testHaving() {
        $this->assertFalse($this->object->hasHaving(), 'Having deveria ser vazio');
        $this->assertEquals($this->object, $this->object->setHaving(array('id' => 1)), 'Não retornou o objeto');
        $this->assertTrue($this->object->hasHaving(), 'Having não deveria ser vazio');
        $this->assertEquals(array(1), $this->object->getHaving()->getParams(), 'Parametro inválido para o having');
        $this->object->setHaving(array());
        $this->assertFalse($this->object->hasHaving(), 'Having deveria ser vazio novamente');
        $where = Where::getInstance(array('id' => 2));
        $this->object->setHaving($where);
        $this->assertEquals($where, $this->object->getHaving());
        $this->assertEquals($this->object, $this->object->clearHaving(), 'Não retornou o objeto');
        $this->assertFalse($this->object->hasHaving(), 'Having deveria ser vazio novamente');
    }

    /**
     * @covers Expression::setGroupBy
     * @covers Expression::addGroupBy
     * @covers Expression::clearGroupBy
     * @covers Expression::hasGroupBy
     * @covers Expression::getGroupBy
     */
    public function testGroupBy() {
        $this->assertFalse($this->object->hasGroupBy(), 'GroupBy deveria ser vazio');
        $this->assertEquals($this->object, $this->object->setGroupby(array('id')), 'Não retornou o objeto');
        $this->assertEquals($this->object, $this->object->addGroupby('label'), 'Não retornou o objeto');
        $this->assertTrue($this->object->hasGroupBy(), 'GroupBy não deveria ser vazio');
        $this->assertEquals(array('id', 'label'), $this->object->getGroupBy(), 'Retorno inválido');
        $this->assertEquals($this->object, $this->object->clearGroupBy(), 'Não retornou o objeto');
        $this->assertFalse($this->object->hasGroupBy(), 'GroupBy deveria ser vazio novamente');
        $this->object->addGroupBy(1);
        $this->assertFalse($this->object->hasGroupBy(), 'GroupBy deveria continuar vazio');
        $this->object->addGroupBy('teste');
        $this->assertEquals(array('teste'), $this->object->getGroupBy());
        $this->object->setGroupBy('teste2');
        $this->assertEquals(array('teste2'), $this->object->getGroupBy());
    }

    /**
     * @covers Expression::setLimit
     * @covers Expression::getLimit
     * @covers Expression::getOffset
     * @covers Expression::hasLimit
     * @covers Expression::getOffset
     * @covers Expression::clearLimits
     */
    public function testLimits() {
        $this->assertFalse($this->object->hasLimit(), 'Limit deveria ser vazio');
        $this->assertFalse($this->object->hasOffset(), 'Offset deveria ser vazio');
        $this->assertEquals($this->object, $this->object->setLimit(10), 'Não retornou o objeto');
        $this->assertTrue($this->object->hasLimit(), 'Limit não deveria ser vazio');
        $this->assertTrue($this->object->hasOffset(), 'Offset não deveria ser vazio');
        $this->assertEquals(10, $this->object->getLimit(), 'Retorno inválido para o limite');
        $this->assertEquals(0, $this->object->getOffset(), 'Retorno inválido para o offset');
        $this->assertEquals($this->object, $this->object->clearLimits(), 'Não retornou o objeto');
        $this->assertFalse($this->object->hasLimit(), 'Limit deveria ser vazio novamente');
        $this->assertFalse($this->object->hasOffset(), 'Offset deveria ser vazio novamente');
    }

    /**
     * @covers Expression::addOrderBy
     * @covers Expression::clearOrderBy
     * @covers Expression::hasOrderBy
     * @covers Expression::getOrderBy
     */
    public function testOrderBy() {
        $this->assertFalse($this->object->hasOrderBy(), 'OrderBy deveria ser vazio');
        $this->assertEquals($this->object, $this->object->addOrderby('id'), 'Não retornou o objeto');
        $this->assertTrue($this->object->hasOrderBy(), 'OrderBy não deveria ser vazio');
        $this->assertEquals(array('id' => 'ASC'), $this->object->getOrderBy(), 'Retorno inválido');
        $this->object->addOrderby('cp', 'DESC');
        $this->assertEquals(array('id' => 'ASC', 'cp' => 'DESC'), $this->object->getOrderBy(), 'Retorno inválido');
        $this->object->addOrderby('id', 'DESC');
        $this->assertEquals(array('id' => 'DESC', 'cp' => 'DESC'), $this->object->getOrderBy(), 'Retorno inválido');
        $this->assertEquals($this->object, $this->object->clearOrderBy(), 'Não retornou o objeto');
        $this->assertFalse($this->object->hasOrderBy(), 'OrderBy deveria ser vazio novamente');        
        $this->object->addOrderBy('teste', 'xyz');
        $this->assertFalse($this->object->hasGroupBy(), 'GroupBy deveria continuar vazio');
    }

    /**
     * @covers Expression::getInstance
     * @todo   Implement testGetInstance().
     */
    public function testGetInstance() {
        $this->object = Expression::getInstance(array('x' => 'y'));
        $this->assertFalse($this->object->hasWhere(), 'Falha ao possuir o WHERE');
        $this->assertEquals($this->object, Expression::getInstance($this->object));
    }

}

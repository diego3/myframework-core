<?php
require_once 'util/database/DAO.php';

// @codeCoverageIgnoreStart
class MyDAO extends DAO {
    protected function setParams() {
        $this->tablename = 'test';
        $this->hasactive = false;
    }
    
    public function getTableId($campo, $valor) {
        return parent::getTableId($campo, $valor);
    }
    
    public function loadDAO($dao) {
        return parent::loadDAO($dao);
    }
    
    public function setAtivo($default=true) {
        $this->hasactive = $default;
    }
    
    public function changeToTable2() {
        $this->tablename = 'test2';
        $this->pks = array('id1', 'id2');
    }
    
    public function getByName($name) {
        return $this->getByKey('name', $name);
    }
}
// @codeCoverageIgnoreEnd

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-07-07 at 23:53:02.
 */
class DAOTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Database
     */
    protected $db;
    
    /**
     * DAO object
     * @var MyDAO
     */
    protected $dao;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->db = Factory::database();
        $sql1 = <<<'SQL'
   CREATE TABLE IF NOT EXISTS test (
     id    serial PRIMARY KEY,
     name  varchar(10) NOT NULL CHECK (name <> ''),
     ativo bool DEFAULT true
   )
SQL;
        $sql2 = <<<'SQL'
   CREATE TABLE IF NOT EXISTS test2 (
     id1 int, id2 int,
     name  varchar(10) NOT NULL CHECK (name <> ''),
     ativo bool DEFAULT true,
     PRIMARY KEY(id1, id2)
   )
SQL;
        try {
            $this->db->exec($sql1);
            $this->assertTrue($this->db->exec("INSERT INTO test (name) VALUES ('value 1')")>0);
            $this->assertTrue($this->db->exec("INSERT INTO test (name) VALUES ('value 2')")>0);
            $this->assertTrue($this->db->exec("INSERT INTO test (name) VALUES ('value 3')")>0);
            $this->db->exec($sql2);
            $this->assertTrue($this->db->exec("INSERT INTO test2 (id1, id2, name) VALUES (1, 1, 'value 1')")>0);
            $this->assertTrue($this->db->exec("INSERT INTO test2 (id1, id2, name) VALUES (1, 2, 'value 2')")>0);
            $this->assertTrue($this->db->exec("INSERT INTO test2 (id1, id2, name) VALUES (2, 1, 'value 3')")>0);
        }
        catch (Exception $e) {
            $this->fail($e->getMessage());
        }
        $this->dao = new MyDAO();
    }
    
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        try {
            $this->db->exec('DROP TABLE IF EXISTS test');
            $this->db->exec('DROP TABLE IF EXISTS test2');
        }
        catch (Exception $e) {
            $this->fail($e->getMessage());
        }
    }

    public function testParams() {
        $this->assertEquals('test', $this->dao->getTableName());
        $this->assertEquals('id', $this->dao->getPKFieldName());
        $this->dao->changeToTable2();
        $this->assertEquals('test2', $this->dao->getTableName());
        $this->assertEquals(array('id1', 'id2'), $this->dao->getPKFieldName());
        $this->assertEquals(Factory::database(), $this->dao->getDatabase());
        
        //Invalid database object - Dont do this
        $dao = new MyDAO(Factory::log());
        $this->assertEquals(Factory::log(), $dao->getDatabase());
    }

    public function testInsert() {
        $this->assertEquals(1, $this->dao->insert(array('name' => 'John')));
        $result = $this->dao->getById(4);
        $this->assertNotEmpty($result);
        $this->assertEquals(4, $result['id']);
        $this->assertEquals('John', $result['name']);
        
        //Invalid tests
        $this->assertEquals(0, $this->dao->insert(array('xyz' => 'John')));
        $this->assertEquals(0, $this->dao->insert(array()));
        $this->assertEquals(0, $this->dao->insert(array('name' => '')));
        $this->assertEquals(0, $this->dao->insert(array('name' => '123456789012345')));
        
        //Change table
        $this->dao->changeToTable2();
        $this->assertEquals(1, $this->dao->insert(array('id1' => 2, 'id2' => 2, 'name' => 'more test')));
        $row = $this->dao->getById(array('id1' => 2, 'id2' => 2));
        $this->assertNotEmpty($row);
        $this->assertEquals(2, $row['id1']);
        $this->assertEquals(2, $row['id2']);
        $this->assertEquals('more test', $row['name']);
        
        $this->assertEquals(0, $this->dao->insert(array('id1' => 2, 'name' => 'more test')));
    }

    public function testUpdate() {
        $result = $this->dao->getById(1);
        $this->assertNotEquals('John', $result['name']);
        $this->assertEquals(1, $this->dao->update(array('name' => 'John'), 1));
        $result2 = $this->dao->getById(1);
        $this->assertEquals('John', $result2['name']);
        
        //Invalid tests
        $this->assertEquals(0, $this->dao->update(array('xyz' => 'John'), 1));
        $this->assertEquals(0, $this->dao->update(array(), 1));
        $this->assertEquals(0, $this->dao->update(array('name' => ''), 1));
        $this->assertEquals(0, $this->dao->update(array('name' => '123456789012345'), 1));
        $this->assertEquals(0, $this->dao->update(array('name' => 'John'), 0));
        
        //Change table
        $this->dao->changeToTable2();
        $this->assertEquals(1, $this->dao->update(array('name' => 'my test'), array('id1' => 1, 'id2' => 1)));
        $row = $this->dao->getById(array('id1' => 1, 'id2' => 1));
        $this->assertNotEmpty($row);
        $this->assertEquals(1, $row['id1']);
        $this->assertEquals(1, $row['id2']);
        $this->assertEquals('my test', $row['name']);
        
        $this->assertEquals(0, $this->dao->update(array('name' => 'my test'), array('id1' => 1)));
    }

    public function testDelete() {
        $this->assertNotEmpty($this->dao->listAll());
        $this->assertEquals(1, $this->dao->delete(1));
        $this->assertEmpty($this->dao->getById(1));
        $this->assertEquals(1, $this->dao->delete(2));
        $this->assertEmpty($this->dao->getById(2));
        $this->assertEquals(1, $this->dao->delete(3));
        $this->assertEmpty($this->dao->getById(3));
        $this->assertEmpty($this->dao->listAll());
        
        //Invalid delete
        $this->assertEquals(0, $this->dao->delete(3));
        
        //Change table
        $this->dao->changeToTable2();
        $this->assertEquals(1, $this->dao->delete(array('id1' => 1, 'id2' => 1)));
        $this->assertEmpty($this->dao->getById(array('id1' => 1, 'id2' => 1)));
        $this->assertEquals(0, $this->dao->delete(array('id1' => 1, 'id2' => 1)));
        $this->assertEquals(0, $this->dao->delete(array('id1' => 1)));
    }
    
    public function testDeleteAtivo() {
        $this->dao->setAtivo();
        $this->assertNotEmpty($this->dao->listAll());
        $this->assertEquals(1, $this->dao->delete(1));
        $this->assertEmpty($this->dao->getById(1));
        $this->assertEquals(1, $this->dao->delete(2));
        $this->assertEmpty($this->dao->getById(2));
        $this->assertEquals(1, $this->dao->delete(3));
        $this->assertEmpty($this->dao->getById(3));
        $this->assertEmpty($this->dao->listAll());
        
        //Invalid delete
        $this->assertEquals(0, $this->dao->delete(3));
        
        //Change table
        $this->dao->changeToTable2();
        $this->assertEquals(1, $this->dao->delete(array('id1' => 1, 'id2' => 1)));
        $this->assertEmpty($this->dao->getById(array('id1' => 1, 'id2' => 1)));
        $this->assertEquals(0, $this->dao->delete(array('id1' => 1, 'id2' => 1)));
        $this->assertEquals(0, $this->dao->delete(array('id1' => 1)));
    }
    
    public function testGetById() {
        $result1 = $this->dao->getById(1);
        $this->assertNotEmpty($result1);
        $result2 = $this->dao->getById(2);
        $this->assertNotEmpty($result2);
        $this->assertNotEquals($result1, $result2);
        $this->assertEquals(1, $result1['id']);
        $this->assertEquals(2, $result2['id']);
        $this->assertEmpty($this->dao->getById(6));
        $this->assertEmpty($this->dao->getById('xyq'));
        
        $this->assertEquals(1, $this->dao->delete(1));
        $this->assertEmpty($this->dao->getById(1));
        $this->assertEmpty($this->dao->getById(1, true));
        
        $this->dao->setAtivo();
        $this->assertEquals(1, $this->dao->delete(2));
        $this->assertEmpty($this->dao->getById(2));
        $this->assertNotEmpty($this->dao->getById(2, true));
        
        //Change table
        $this->dao->setAtivo(false);
        $this->dao->changeToTable2();
        $this->assertNotEmpty($this->dao->getById(array('id1' => 1, 'id2' => 1)));
        $this->assertEmpty($this->dao->getById(array('id1' => 1, 'id2' => 5)));
        $this->assertEmpty($this->dao->getById(array('id1' => 1)));
        $this->assertEmpty($this->dao->getById(array('id1' => 2)));
        $this->assertEquals(1, $this->dao->delete(array('id1' => 1, 'id2' => 1)));
        $this->assertEmpty($this->dao->getById(array('id1' => 1, 'id2' => 1)));
        $this->dao->setAtivo();
        $this->assertEquals(1, $this->dao->delete(array('id1' => 1, 'id2' => 2)));
        $this->assertEmpty($this->dao->getById(array('id1' => 1, 'id2' => 2)));
        $this->assertNotEmpty($this->dao->getById(array('id1' => 1, 'id2' => 2), true));
    }

    public function testByKey() {
        $result = $this->dao->getByName('value 1');
        $this->assertNotEmpty($result);
        $this->assertEquals(1, $result['id']);
        
        $result2 = $this->dao->getByName('value 2');
        $this->assertNotEmpty($result2);
        $this->assertEquals(2, $result2['id']);
        
        $this->assertEmpty($this->dao->getByName('Value'));
    }
    
    public function testListByCondition() {
        $this->dao->setAtivo();
        $this->assertEquals(1, $this->dao->delete(1));
        $result1 = $this->dao->listByCondition('id', array('ativo' => 'false'));
        $this->assertCount(1, $result1);
        $this->assertEquals(1, $result1[0]['id']);
        
        //Change table
        $this->dao->changeToTable2();
        $result2 = $this->dao->listByCondition(array('id1', 'id2'), array(), array('id1', 'id2'));
        $this->assertCount(3, $result2);
        $this->assertEquals(1, $result2[0]['id1']);
        $this->assertEquals(1, $result2[1]['id1']);
        $this->assertEquals(2, $result2[2]['id1']);
        $this->assertEquals(1, $result2[0]['id2']);
        $this->assertEquals(2, $result2[1]['id2']);
        $this->assertEquals(1, $result2[2]['id2']);
    }
    
    public function testListAll() {
        $this->assertCount(3, $this->dao->listAll());
        $this->assertEquals(1, $this->dao->delete(1));
        $this->assertCount(2, $this->dao->listAll());
        $this->dao->setAtivo();
        $this->assertEquals(1, $this->dao->delete(2));
        $this->assertCount(1, $this->dao->listAll());
        $this->assertEquals(1, $this->dao->delete(3));
        $this->assertCount(0, $this->dao->listAll());   
        
         //Change table
        $this->dao->changeToTable2();
        $this->assertCount(3, $this->dao->listAll());
        $this->assertEquals(1, $this->dao->delete(array('id1' => 1, 'id2' => 1)));
        $this->assertCount(2, $this->dao->listAll());
        $this->dao->setAtivo();
        $this->assertEquals(1, $this->dao->delete(array('id1' => 1, 'id2' => 2)));
        $this->assertCount(1, $this->dao->listAll());
    }

    public function testListAllParams() {
        //Order by
        $dados = $this->dao->listAll(array('id' => 'desc'));
        $this->assertEquals(3, $dados[0]['id']);
        $this->assertEquals(2, $dados[1]['id']);
        $this->assertEquals(1, $dados[2]['id']);
        
        $this->dao->insert(array('name' => 'aaaaA'));
        $dados2 = $this->dao->listAll(array('name'));
        $this->assertEquals(4, $dados2[0]['id']);
        $this->assertEquals(1, $dados2[1]['id']);
        $this->assertEquals(2, $dados2[2]['id']);
        $this->assertEquals(3, $dados2[3]['id']);
        
        $dados3 = $this->dao->listAll(array('name'), 0, 2);
        $this->assertCount(2, $dados3);
        $this->assertEquals(4, $dados3[0]['id']);
        $this->assertEquals(1, $dados3[1]['id']);
        
        $dados4 = $this->dao->listAll(array('name'), 2, 10);
        $this->assertCount(2, $dados4);
        $this->assertEquals(2, $dados4[0]['id']);
        $this->assertEquals(3, $dados4[1]['id']);
        
        $dados5 = $this->dao->listAll(array('name'), 10, 10);
        $this->assertEmpty($dados5);
        
        //Change Table
        $this->dao->changeToTable2();
        $this->assertCount(3, $this->dao->listAll());
    }

    public function testGetIndexedArray() {
        $dados = $this->dao->getIndexedArray();
        foreach ($dados as $k => $val) {
            $this->assertEquals($k, $val['id']);
            $this->assertEquals(array('id', 'name', 'ativo'), array_keys($val));
        }
        
        $dados1 = $this->dao->getIndexedArray(array('ativo', 'name'));
        foreach ($dados1 as $k => $val) {
            $this->assertEquals($dados[$k]['name'], $val['name']);
            $this->assertEquals(array('ativo', 'name'), array_keys($val));
        }
        
        $dados2 = $this->dao->getIndexedArray('name');
        foreach ($dados2 as $k => $val) {
            $this->assertEquals($dados[$k]['name'], $val);
        }
        $dados20 = $this->dao->getIndexedArray('test.name');
        foreach ($dados20 as $k => $val) {
            $this->assertEquals($dados[$k]['name'], $val);
        }
        
        //Change Table
        $this->dao->changeToTable2();
        $dados3 = $this->dao->getIndexedArray();
        foreach ($dados3 as $k => $val) {
            $this->assertEquals($k, $val['id1'] . '_' . $val['id2']);
            $this->assertEquals(array('id1', 'id2', 'name', 'ativo'), array_keys($val));
        }
    }
    
    public function testGetTableId() {
        $this->assertEquals(1, $this->dao->getTableId('xyz', 1));
        $this->assertEquals(13, $this->dao->getTableId('xyz', 13));
        $this->assertEquals(1, $this->dao->getTableId('id', 1));
        $this->assertEquals(1, $this->dao->getTableId('name', 'value 1'));
        $this->assertEquals(3, $this->dao->getTableId('name', 'value 3'));
        $this->assertEquals(-1, $this->dao->getTableId('name', 'xyz'));
    }
    
    public function testLoadDAO() {
        $userdao = $this->dao->loadDAO('usuario');
        $this->assertNotEmpty($userdao);
        $this->assertEquals($userdao, $this->dao->loadDAO('usuario'));
        $this->assertEquals($userdao, $this->dao->loadDAO('UsuarioDAO'));
        $this->assertSame($userdao, $this->dao->loadDAO('UsuarioDAO'));
        $this->assertSame($this->dao->getDatabase(), $userdao->getDatabase());
        $this->assertNotEquals($userdao, $this->dao->loadDAO('GrupoDAO'));
        $this->assertSame($userdao->getDatabase(), $this->dao->loadDAO('GrupoDAO')->getDatabase());
    }
}
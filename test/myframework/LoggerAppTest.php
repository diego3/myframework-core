<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-07-07 at 22:46:28.
 */
class LoggerAppTest extends PHPUnit_Framework_TestCase {

    protected function setUp() {
        Memory::clear('debug');
        LoggerApp::clear();
    }
    
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        LoggerApp::clear();
    }

    /**
     * @covers LoggerApp::getLastError
     */
    public function testGetLastError() {
        $this->assertEmpty(LoggerApp::getLastError());
        Factory::log()->error('teste de erro');
        $this->assertEquals('teste de erro', LoggerApp::getLastError());
        Factory::log()->error('mais um erro');
        $this->assertEquals('mais um erro', LoggerApp::getLastError());
    }

    /**
     * @covers LoggerApp::getErrors
     */
    public function testGetErrors() {
        $this->assertEmpty(LoggerApp::getErrors());
        Factory::log()->warn('message de warning');
        $this->assertEquals(array('warn'), array_keys(LoggerApp::getErrors()));
        $this->assertEquals(array('warn' => array('message de warning')), LoggerApp::getErrors());
        $this->assertEquals(array('message de warning'), LoggerApp::getErrors('warn'));
        Factory::log()->warn('teste2');
        $this->assertEquals(array('message de warning', 'teste2'), LoggerApp::getErrors('warn'));
        Factory::log()->error('error');
        $this->assertEquals(array('warn', 'error'), array_keys(LoggerApp::getErrors()));
        $this->assertEquals(array('error'), LoggerApp::getErrors('error'));
        Factory::log()->info('info');
        Factory::log()->trace('trace');
        Factory::log()->debug('debug');
        $this->assertEquals(array('warn', 'error'), array_keys(LoggerApp::getErrors()));
        Factory::log()->fatal('fatal');
        $this->assertEquals(array('warn', 'error', 'fatal'), array_keys(LoggerApp::getErrors()));
        $this->assertEquals(array('fatal'), LoggerApp::getErrors('fatal'));
        
        //Invalid tests
        $this->assertEmpty(LoggerApp::getErrors('xyz'));
        $this->assertEmpty(LoggerApp::getErrors(''));
    }

    /**
     * @covers LoggerApp::hasError
     */
    public function testHasError() {
        $this->assertFalse(LoggerApp::hasError());
        Factory::log()->error('error');
        $this->assertTrue(LoggerApp::hasError());
        $this->assertTrue(LoggerApp::hasError('error'));
        $this->assertFalse(LoggerApp::hasError('warn'));
        
        //Invalid tests
        $this->assertEmpty(LoggerApp::getErrors('xyz'));
    }

    /**
     * @covers LoggerApp::getTotalErrors
     */
    public function testGetTotalErrors() {
        $this->assertEquals(0, LoggerApp::getTotalErrors());
        Factory::log()->error('error1');
        $this->assertEquals(1, LoggerApp::getTotalErrors());
        Factory::log()->error('error2');
        $this->assertEquals(2, LoggerApp::getTotalErrors());
        Factory::log()->warn('warn1');
        $this->assertEquals(3, LoggerApp::getTotalErrors());
        Factory::log()->warn('warn2');
        $this->assertEquals(4, LoggerApp::getTotalErrors());
        Factory::log()->debug('debug');
        $this->assertEquals(4, LoggerApp::getTotalErrors());
    }

    /**
     * @covers LoggerApp::clear
     */
    public function testClear() {
        $this->assertEmpty(LoggerApp::getErrors());
        Factory::log()->error('error1');
        $this->assertNotEmpty(LoggerApp::getErrors());
        Factory::log()->warn('warn1');
        $this->assertNotEmpty(LoggerApp::getErrors());
        LoggerApp::clear('error');
        $this->assertNotEmpty(LoggerApp::getErrors());
        $this->assertNotEmpty(LoggerApp::getErrors('warn'));
        $this->assertEmpty(LoggerApp::getErrors('error'));
        Factory::log()->error('error1');
        LoggerApp::clear('xyz');
        $this->assertNotEmpty(LoggerApp::getErrors('error'));
        LoggerApp::clear();
        $this->assertEmpty(LoggerApp::getErrors('error'));
        $this->assertEmpty(LoggerApp::getErrors('warn'));
        $this->assertEmpty(LoggerApp::getErrors());
    }

}
